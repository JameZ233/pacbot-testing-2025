import smbus
import time
import RPi.GPIO as GPIO

# Initialize the I2C bus (bus 1 on Raspberry Pi)
bus = smbus.SMBus(1)

# Default I2C address of VL6180X sensors
default_address = 0x29

# New unique addresses for each sensor
sensor_addresses = {
    "sensor_1": 0x30,
    "sensor_2": 0x31,
    "sensor_3": 0x32
}

# Define the GPIO pins for each sensor's CE pin
sensor_ce_pins = {
    "sensor_1": 17,  # GPIO17 for Sensor 1 CE
    "sensor_2": 22,  # GPIO22 for Sensor 2 CE
    "sensor_3": 27   # GPIO27 for Sensor 3 CE
}

# Define the register you want to read from (proximity or range register)
sensor_register = 0x04  # Register for proximity data

# Setup GPIO
GPIO.setmode(GPIO.BCM)
for pin in sensor_ce_pins.values():
    GPIO.setup(pin, GPIO.OUT)
    GPIO.output(pin, GPIO.LOW)  # Disable all sensors initially

# Function to enable a specific sensor
def enable_sensor(ce_pin):
    GPIO.output(ce_pin, GPIO.HIGH)
    time.sleep(0.01)  # Short delay to stabilize

# Function to disable a specific sensor
def disable_sensor(ce_pin):
    GPIO.output(ce_pin, GPIO.LOW)

# Function to change the I2C address of a sensor
def change_i2c_address(old_address, new_address):
    try:
        # Write new address to I2C address register (sensor-specific, usually 0x212 for VL6180X)
        bus.write_byte_data(old_address, 0x212, new_address)
        print(f"Changed I2C address from {hex(old_address)} to {hex(new_address)}")
    except Exception as e:
        print(f"Error changing address from {hex(old_address)} to {hex(new_address)}: {e}")

# Function to initialize sensors with unique addresses
def initialize_sensors():
    for sensor_name, new_address in sensor_addresses.items():
        ce_pin = sensor_ce_pins[sensor_name]
        enable_sensor(ce_pin)
        time.sleep(0.1)  # Allow time for sensor to power up
        change_i2c_address(default_address, new_address)
        disable_sensor(ce_pin)
        time.sleep(0.1)  # Delay between sensor initializations

# Function to scan I2C bus for connected devices
def scan_i2c_bus():
    detected_addresses = []
    print("Scanning I2C bus for devices...")
    for address in range(128):  # I2C address range from 0x00 to 0x7F
        try:
            bus.read_byte(address)
            detected_addresses.append(hex(address))
        except:
            pass  # Ignore errors for addresses with no device
    return detected_addresses

# Initialize sensors with unique addresses
initialize_sensors()

# Scan the I2C bus and output detected addresses
detected_addresses = scan_i2c_bus()
print(f"Detected I2C addresses: {detected_addresses}")

# If the correct addresses are detected, proceed with reading data
if all(hex(addr) in detected_addresses for addr in sensor_addresses.values()):
    print("All sensors initialized successfully with unique addresses.")
else:
    print("Some sensors were not detected at the expected addresses.")

# Main loop to read each sensor at its specified interval (if necessary)
# Further code can be added here for reading data based on detected addresses
